import sys
from PyQt5.QtWidgets import *
from PyQt5 import uic
from socket import *
import threading
import json
import time

#UI파일 연결
#단, UI파일은 Python 코드 파일과 같은 디렉토리에 위치해야한다.
form_class = uic.loadUiType("teacher.ui")[0]

#화면을 띄우는데 사용되는 Class 선언
class WindowClass(QMainWindow, form_class) :
    def __init__(self) :
        super().__init__()
        self.setupUi(self)
        self.initialize_socket()                        # 소켓생성 및 서버와 연결

        self.entrance_btn.clicked.connect(self.main)    # 초기화면 입장버튼 누르면 메인화면 들어감
        self.update_btn.clicked.connect(self.update)    # 문제 update 출제완료버튼 눌렀을 때
        self.QA_send_btn.clicked.connect(self.QNA)      # QNA 작성완료버튼 눌렀을 때
        self.tableWidget.cellDoubleClicked.connect(self.qna_doubleclick) # QNA 더블클릭했을 때

        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)   # 열넓이자동조절

        self.stackedWidget.setCurrentIndex(0)

    # 소켓생성 및 서버와 연결
    def initialize_socket(self):
        ip=input('ip입력')
        port=int(input('port입력'))
        self.client_socket=socket(AF_INET,SOCK_STREAM)
        self.client_socket.connect((ip,port))

    def receive_message(self,socket):
        while True:
            try:
                buf=socket.recv(9999)
                if not buf:
                    break
            except Exception as e:
                print(e)
            else:
                self.received_message = json.loads(buf.decode('utf-8'))
                print(self.received_message)
                identifier = self.received_message.pop(0)
                # QNA 받기
                if identifier == 'teacher_QNA':
                    self.qna_show()


    # 첫번째 페이지에서 메인화면으로 들어옴
    def main(self):
        self.stackedWidget.setCurrentIndex(1)

        # Q&A 화면 보이도록 서버로 보내기
        QNA=['teacher_QNA']
        self.client_socket.send((json.dumps(QNA)).encode())

    # QNA 작성완료 버튼 눌렀을 때
    def QNA(self):
        qna_answer = self.QA_answer.toPlainText().strip()
        if qna_answer == '':
            self.alarm_label.setText('작성내용확인요망')
        else:
            num = self.qna[self.row][0]
            # self.tableWidget.clearContents()          # 구지 안해도 됨...
            qna_answer_list=['teacher_qna_answer',f'{qna_answer}','완료',f'{num}']
            # 서버로 전송
            self.client_socket.send((json.dumps(qna_answer_list)).encode())
            # 제목, 작성자, 내용, 답변 초기화
            self.QA_title.setText('')
            self.QA_man.setText('')
            self.QA_1.setText('')
            self.alarm_label.setText('')
            self.QA_answer.setText('')

    # qna내역 테이블 위젯에 띄우기
    def qna_show(self):
        # DB에서 가져온 데이터 None값 바꾸기
        self.qna = []
        for i in range(len(self.received_message[0])):
            temp1 = []
            for j in range(len(self.received_message[0][0])):
                if bool(self.received_message[0][i][j]) == False:
                    temp1.append('')
                else:
                    temp1.append(self.received_message[0][i][j])
            self.qna.append(temp1)
        print(self.qna)
        # 헤더, 열, 행 갯수 셋팅
        header=['답변\n상태','작성자','Q&A제목','Q&A내용','작성일']
        self.tableWidget.setColumnCount(len(header))
        self.tableWidget.setHorizontalHeaderLabels(header)
        self.tableWidget.setRowCount(len(self.qna))
        # 테이블 위젯에 띄우기
        for i in range(len(self.qna)):
            self.tableWidget.setItem(i,0,QTableWidgetItem(str(self.qna[i][7]))) # 답변상태
            self.tableWidget.setItem(i,1,QTableWidgetItem(str(self.qna[i][1]))) # 작성자명
            self.tableWidget.setItem(i,2,QTableWidgetItem(str(self.qna[i][2]))) # QNA제목
            self.tableWidget.setItem(i,3,QTableWidgetItem(str(self.qna[i][3]))) # QNA내용
            self.tableWidget.setItem(i,4,QTableWidgetItem(str(self.qna[i][4]))) # 작성일

    # qna 셀 더블클릭시
    def qna_doubleclick(self):
        self.row=self.tableWidget.currentRow()               # 행 번호 가져오기
        title=self.tableWidget.item(self.row,2).text()       # 행의 제목 가져오기
        self.QA_title.setText(f'{title}')
        man=self.tableWidget.item(self.row,1).text()         # 행의 작성자명 가져오기
        self.QA_man.setText(f'{man}')
        content=self.tableWidget.item(self.row,3).text()     # 행의 내용 가져오기
        self.QA_1.setText(f'{content}')
        answer = self.qna[self.row][5]                       # 행의 답변내용 가져오기
        self.QA_answer.setText(f'{answer}')

    # 출제완료 버튼 눌렀을 때
    def update(self):
        # 분야, 제목, 내용, 정답 입력 내용 가져오기
        up_field=self.update_comboBox.currentText()
        up_title=self.update_title.text().strip()
        up_content=self.update_content.toPlainText().strip()
        up_answer=self.update_answer.text().strip()
        # 입력 내용들 누락시 알림
        if up_field == '선택' :
            self.update_label.setText('분야 입력요망')
        elif up_title == '':
            self.update_title_label.setText('제목 입력요망')
        elif up_content == '':
            self.update_content_label.setText('내용 입력요망')
        elif up_answer == '':
            self.update_answer_label.setText('정답입력요망')
        # 모두 입력되었을 때
        else:
            # 누락시 알림한 내용, 입력내용 clear,
            self.update_label.setText('')
            self.update_title_label.setText('')
            self.update_content_label.setText('')
            self.update_answer_label.setText('')
            self.update_title.clear()
            self.update_content.clear()
            self.update_answer.clear()
            # 서버로 전송
            update=['teacher_update',f'{up_field}',f'{up_title}',f'{up_content}',f'{up_answer}']
            self.client_socket.send((json.dumps(update)).encode())


if __name__ == "__main__" :
    app = QApplication(sys.argv)        #QApplication : 프로그램을 실행시켜주는 클래스
    myWindow = WindowClass()            #WindowClass의 인스턴스 생성
    myWindow.show()                     #프로그램 화면을 보여주는 코드
    Thread=threading.Thread(target=myWindow.receive_message, args=(myWindow.client_socket,))
    Thread.daemon=True
    Thread.start()
    app.exec_()                         #프로그램을 이벤트루프로 진입시키는(프로그램을 작동시키는) 코드





























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































